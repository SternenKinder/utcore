# HOW TO BUILD (A) LIBRAR-Y/IES FROM A MODULE
# Building libraries from modules should be consistent for each module.
# Use the following scheme for each new library created:
#
# a) Check for required libraries. If they are not available return False
# b) Define the src-subdirectories for which the library should be compiled
#    and glob all files in there
# c) Define a [LIBRARY]_options variable for the library containing all dependencies
#    from other libraries. Create a clone from the master environment and add those options.
# d) WINDOWS ONLY: Create a header file which implements dll interface functionality
#    dependent from a [LIBRARY]_DLL define. If the define is set, the dll should be exported,
#    if not, the dll should be imported. Set the define in the preprocessor options for the environment.
# e) Build the library!
# f) Remove all entries for (at least) the LIBS and LIBPATH keys in the options and
#    add only the newly-compiled library as a dependcy. This will avoid multiple includes
#    of libraries. Also verify that the import/export-switch define is not set.
# g) Export the options so that other libraries can base on this library. 
# h) Optionally setup help and ide projects
#
# The use of options and possibility to export them makes hierarchical build environments
# obsolete. Avoid exporting new environments to the build system.

import sys
import os.path

Import ( '*' )

# a)
# nothing to do this time

# b)
sources = globSourceFiles( '*.cpp' )
headers = globSourceFiles( '*.h' )
# c)
tinyxml_options = { 'CPPDEFINES' : [ 'TIXML_USE_STL' ], 'CPPPATH' : [ getCurrentPath() ] }

env = masterEnv.Clone()
env.AppendUnique( **tinyxml_options )

# d)
if sys.platform == 'win32':	
	env.AppendUnique( CPPDEFINES = [ '_LIB', '_CRT_SECURE_NO_DEPRECATE' ] )
	env.AppendUnique( LINKFLAGS = [ '/NODEFAULTLIB' ] )
elif sys.platform.startswith( 'linux' ):
	env.AppendUnique( CPPFLAGS = [ '-fPIC' ] )
	

# e)	
# compile all source files into single library
# {buildenvironment, source files, name of the library, build target}
libs = setupStaticLibraryBuild(env, sources, 'tinyxml', 'core')
setupIncludeInstall(env, headers, 'tinyxml', 'includes')

# f)
tinyxml_options[ 'LIBS' ] = []
tinyxml_options[ 'LIBPATH' ] = []
tinyxml_options[ 'LIBS' ] += libs
tinyxml_options[ 'LIBPATH' ] += [ install_library_prefix ]

# g)
have_tinyxml = libs != 0
Export( [ 'tinyxml_options', 'have_tinyxml' ] )

# h)

createVisualStudioProject(env, sources, headers, 'tinyxml')

